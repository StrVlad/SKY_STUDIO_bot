from aiogram import Router, types, F, Bot
from aiogram.filters import Text, StateFilter, Command
from aiogram.fsm.context import FSMContext
from configs.config import admins
from modules import keyboards
from modules.database import DB
from modules.states import Admin
import datetime
import requests

router = Router()

DATABASE = DB()

calendar = keyboards.InlineCalendar()


def _hour_range(start_hour, end_hour):
    for n in range(start_hour, end_hour + 1):
        yield n


@router.message(StateFilter(Admin), Text(["–≤–µ—Ä–Ω—É—Ç—å—Å—è"], ignore_case=True))
@router.message(F.from_user.id.in_(admins), Text(["–∞–¥–º–∏–Ω", "–∞–¥–º–∏–Ω–∫–∞"], ignore_case=True))
@router.message(F.from_user.id.in_(admins), Command("admin"))
async def admin(message: types.Message, state: FSMContext):
    await state.set_state(Admin.start)
    await message.answer(text="–ü—Ä–∏–≤–µ—Ç, –•–æ–∑—è–∏–Ω", reply_markup=keyboards.admin_keyboard())


@router.message(StateFilter(Admin.start), Text("üò∫"))
async def cat(message: types.Message):
    r = requests.get("https://cataas.com/cat")
    if r.status_code == 200:
        with open("cat.png", 'wb') as f:
            for chunk in r.iter_content(1024):
                f.write(chunk)
    cat = types.FSInputFile("cat.png")
    await message.answer_photo(photo=cat, reply_markup=keyboards.admin_keyboard())


# –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –±—Ä–æ–Ω–∏

@router.message(StateFilter(Admin.start), Text("–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –±—Ä–æ–Ω–∏", ignore_case=True))
async def ten_books(message: types.Message):
    books = DATABASE.get_ten_books(date=datetime.datetime.now())
    books_message = ""
    i = 0
    for book in books:
        i += 1
        books_message += f"{i}: {book[1]} –Ω–∞ {book[2]}\n"
    if not books:
        await message.answer("–ù–µ—Ç –±—Ä–æ–Ω–µ–π", reply_markup=keyboards.admin_keyboard())
        return
    await message.answer(f"–ë–ª–∏–∂–∞–π—à–∏–µ –±—Ä–æ–Ω–∏:\n{books_message}", reply_markup=keyboards.admin_keyboard())


@router.message(StateFilter(Admin.start), Text("–∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", ignore_case=True))
async def ban_start(message: types.Message, state: FSMContext):
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞ (–±–µ–∑ @)", reply_markup=keyboards.admin_cancel())
    await state.set_state(Admin.ban_start)


@router.message(StateFilter(Admin.unban_start))
async def ban(message: types.Message, state: FSMContext):
    unban_username = message.text
    client_id = DATABASE.get_id_by_username_from_banned(unban_username)
    if not client_id:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", reply_markup=keyboards.admin_cancel())
        return
    DATABASE.delete_banned(int(client_id[0]))
    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω", reply_markup=keyboards.admin_keyboard())
    await state.set_state(Admin.start)


@router.message(StateFilter(Admin.start), Text("—Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", ignore_case=True))
async def ban_start(message: types.Message, state: FSMContext):
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞ (–±–µ–∑ @)", reply_markup=keyboards.admin_cancel())
    await state.set_state(Admin.unban_start)


@router.message(StateFilter(Admin.ban_start))
async def ban(message: types.Message, state: FSMContext):
    ban_username = message.text
    client_id = DATABASE.get_id_by_username(ban_username)
    if not client_id:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", reply_markup=keyboards.admin_cancel())
        return
    DATABASE.add_banned(int(client_id[0]), ban_username)
    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω", reply_markup=keyboards.admin_keyboard())
    await state.set_state(Admin.start)


@router.message(StateFilter(Admin.start), Text("–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å", ignore_case=True))
async def block_day(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å", reply_markup=await calendar.create_keyboard(
        datetime.date.today(), datetime.date.today() + datetime.timedelta(days=5)))
    await state.set_state(Admin.block_hour)


@router.callback_query(StateFilter(Admin.block_hour))
async def date_handler(callback: types.CallbackQuery, state: FSMContext):
    data = await calendar.update_keyboard(callback.data, callback.message.reply_markup)
    if isinstance(data, types.InlineKeyboardMarkup):
        await callback.message.edit_reply_markup(reply_markup=data)
        return
    await state.update_data(date=data)
    await state.set_state(Admin.block_hour_time)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è",
                                  reply_markup=keyboards.hours_keyboard(datetime.time(hour=12),
                                                                        datetime.time(hour=23),
                                                                        datetime.datetime.strptime(data, "%Y-%m-%d")))


@router.callback_query(StateFilter(Admin.block_hour_time))
async def block_hour_handler(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await state.update_data(time=callback.data)
    data = await state.get_data()
    try:
        date = datetime.datetime.strptime(data["date"] + data["time"], "%Y-%m-%d%H")
    except ValueError:
        return
    client_id = DATABASE.block_book_in_time_slot(date)
    if client_id:
        await bot.send_message(str(client_id), f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à–∞ –±—Ä–æ–Ω—å –Ω–∞ {date.hour}:00 ({date.date()}) –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.message.answer("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!")


@router.message(StateFilter(Admin.start), Text("–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å", ignore_case=True))
async def block_day(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å", reply_markup=await calendar.create_keyboard(
        datetime.date.today(), datetime.date.today() + datetime.timedelta(days=5)))
    await state.set_state(Admin.block_day)


@router.callback_query(StateFilter(Admin.block_day))
async def block_day_handler(callback: types.CallbackQuery, bot: Bot):
    data = await calendar.update_keyboard(callback.data, callback.message.reply_markup)
    if isinstance(data, types.InlineKeyboardMarkup):
        await callback.message.edit_reply_markup(reply_markup=data)
        return
    date = datetime.datetime.strptime(data, "%Y-%m-%d")
    for hour in _hour_range(date.hour + 12, date.hour + 23):
        client_id = DATABASE.block_book_in_time_slot(date + datetime.timedelta(hours=hour))
        if client_id:
            await bot.send_message(str(client_id), f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—à–∞ –±—Ä–æ–Ω—å –Ω–∞ {hour}:00 ({date.date()}) –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    await callback.message.answer("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!", reply_markup=keyboards.admin_cancel())


@router.message(StateFilter(Admin.start), Text("–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—Ä–æ–Ω–∏", ignore_case=True))
async def bookcheck(message: types.Message, state: FSMContext):
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å",
                         reply_markup=await calendar.create_keyboard(
                             datetime.date.today(), datetime.date.today() + datetime.timedelta(days=5)))
    await state.set_state(Admin.bookcheck_date)


@router.callback_query(StateFilter(Admin.bookcheck_date))
async def date_handler(callback: types.CallbackQuery):
    data = await calendar.update_keyboard(callback.data, callback.message.reply_markup)
    if isinstance(data, types.InlineKeyboardMarkup):
        await callback.message.edit_reply_markup(reply_markup=data)
        return
    date = datetime.datetime.strptime(data, "%Y-%m-%d")
    result = DATABASE.get_book_in_time_window(date, date + datetime.timedelta(hours=23))
    if not result:
        await callback.message.answer(f"–ù–∏–∫—Ç–æ –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª",
                                      reply_markup=keyboards.admin_cancel())
    else:
        answer = ""
        for row in result:
            answer += f"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª {row[1]}, –Ω–∞ {row[2][11:][:5]}\n"
        await callback.message.answer(answer, reply_markup=keyboards.admin_cancel())
